/* Copyright 2022 flagarde */

#include "khaos/CompareVersionMacros.h"

// NOLINTBEGIN
#if defined(_WIN32) && !defined(__MINGW32__) && !defined(__MINGW64__)
  #pragma warning(disable : 4805)
#endif
#include "doctest/doctest.h"
// NOLINTEND

TEST_CASE("Test CHECK_VERSION(x,>,major,minor,patch)")
{
  CHECK_EQ(0, CHECK_VERSION(Khaos, >, MAJOR, MINOR, PATCH));
  CHECK_EQ(0, CHECK_VERSION(Khaos, >, MAJOR, MINOR, PATCH + 1));
  CHECK_EQ(0, CHECK_VERSION(Khaos, >, MAJOR, MINOR + 1, PATCH));
  CHECK_EQ(0, CHECK_VERSION(Khaos, >, MAJOR + 1, MINOR, PATCH));
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, >, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH + 1)
  CHECK_EQ(1, CHECK_VERSION(Test, >, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR + 1, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, >, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, >, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
}

TEST_CASE("Test CHECK_VERSION(x,>=,major,minor,patch)")
{
  CHECK_EQ(1, CHECK_VERSION(Khaos, >=, MAJOR, MINOR, PATCH));
  CHECK_EQ(0, CHECK_VERSION(Khaos, >=, MAJOR, MINOR, PATCH + 1));
  CHECK_EQ(0, CHECK_VERSION(Khaos, >=, MAJOR, MINOR + 1, PATCH));
  CHECK_EQ(0, CHECK_VERSION(Khaos, >=, MAJOR + 1, MINOR, PATCH));
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, >=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH + 1)
  CHECK_EQ(1, CHECK_VERSION(Test, >=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR + 1, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, >=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, >=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
}

TEST_CASE("Test CHECK_VERSION(x,==,major,minor,patch)")
{
  CHECK_EQ(1, CHECK_VERSION(Khaos, ==, MAJOR, MINOR, PATCH));
  CHECK_EQ(0, CHECK_VERSION(Khaos, ==, MAJOR, MINOR, PATCH + 1));
  CHECK_EQ(0, CHECK_VERSION(Khaos, ==, MAJOR, MINOR + 1, PATCH));
  CHECK_EQ(0, CHECK_VERSION(Khaos, ==, MAJOR + 1, MINOR, PATCH));
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, ==, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH + 1)
  CHECK_EQ(0, CHECK_VERSION(Test, ==, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR + 1, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, ==, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, ==, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
}

TEST_CASE("Test CHECK_VERSION(x,<=,major,minor,patch)")
{
  CHECK_EQ(1, CHECK_VERSION(Khaos, <=, MAJOR, MINOR, PATCH));
  CHECK_EQ(1, CHECK_VERSION(Khaos, <=, MAJOR, MINOR, PATCH + 1));
  CHECK_EQ(1, CHECK_VERSION(Khaos, <=, MAJOR, MINOR + 1, PATCH));
  CHECK_EQ(1, CHECK_VERSION(Khaos, <=, MAJOR + 1, MINOR, PATCH));
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, <=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH + 1)
  CHECK_EQ(0, CHECK_VERSION(Test, <=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR + 1, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, <=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, <=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
}

TEST_CASE("Test CHECK_VERSION(x,<,major,minor,patch)")
{
  CHECK_EQ(0, CHECK_VERSION(Khaos, <, MAJOR, MINOR, PATCH));
  CHECK_EQ(1, CHECK_VERSION(Khaos, <, MAJOR, MINOR, PATCH + 1));
  CHECK_EQ(1, CHECK_VERSION(Khaos, <, MAJOR, MINOR + 1, PATCH));
  CHECK_EQ(1, CHECK_VERSION(Khaos, <, MAJOR + 1, MINOR, PATCH));
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, <, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH + 1)
  CHECK_EQ(0, CHECK_VERSION(Test, <, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR + 1, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, <, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, <, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
}

TEST_CASE("Test CHECK_VERSION(x,!=,major,minor,patch)")
{
  CHECK_EQ(0, CHECK_VERSION(Khaos, !=, MAJOR, MINOR, PATCH));
  CHECK_EQ(1, CHECK_VERSION(Khaos, !=, MAJOR, MINOR, PATCH + 1));
  CHECK_EQ(1, CHECK_VERSION(Khaos, !=, MAJOR, MINOR + 1, PATCH));
  CHECK_EQ(1, CHECK_VERSION(Khaos, !=, MAJOR + 1, MINOR, PATCH));
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
  CHECK_EQ(0, CHECK_VERSION(Test, !=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH + 1)
  CHECK_EQ(1, CHECK_VERSION(Test, !=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR, MINOR + 1, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, !=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
#define KHAOS_VERSION_Test_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
  CHECK_EQ(1, CHECK_VERSION(Test, !=, GET_VERSION_MAJOR(Khaos), GET_VERSION_MINOR(Khaos), GET_VERSION_PATCH(Khaos)));
#undef KHAOS_VERSION_Test_PRIVATE
}

/* Test CHECK_VERSIONS */
#define KHAOS_VERSION_Test1_PRIVATE() SET_VERSION(MAJOR, MINOR, PATCH)
#define KHAOS_VERSION_Test2_PRIVATE() SET_VERSION(MAJOR + 1, MINOR, PATCH)
TEST_CASE("Test CHECK_VERSIONS(x,>,y)") { CHECK_EQ(0, CHECK_VERSIONS(Test1, >, Test2)); }

TEST_CASE("Test CHECK_VERSIONS(x,>=,y)") { CHECK_EQ(0, CHECK_VERSIONS(Test1, >=, Test2)); }

TEST_CASE("Test CHECK_VERSIONS(x,==,y)") { CHECK_EQ(0, CHECK_VERSIONS(Test1, ==, Test2)); }

TEST_CASE("Test CHECK_VERSIONS(x,<=,y)") { CHECK_EQ(1, CHECK_VERSIONS(Test1, <=, Test2)); }

TEST_CASE("Test CHECK_VERSIONS(x,<,y)") { CHECK_EQ(1, CHECK_VERSIONS(Test1, <, Test2)); }

TEST_CASE("Test CHECK_VERSIONS(x,!=,y)") { CHECK_EQ(1, CHECK_VERSIONS(Test1, !=, Test2)); }
#undef KHAOS_VERSION_Test1_PRIVATE
#undef KHAOS_VERSION_Test2_PRIVATE
